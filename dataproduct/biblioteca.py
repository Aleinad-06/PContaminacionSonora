import pandas as pd
import streamlit as st
import json
import plotly.express as px
from PIL import Image
import folium
from streamlit_folium import folium_static
import datetime as dt

def load_data(filepath):
    """Carga los datos desde el archivo JSON"""
    with open(filepath, "r", encoding="utf-8") as file:
        inf = json.load(file)
    
    data = []
    for i in inf:
        fecha = i["tiempo"]["fecha"]
        dia_semana = i["tiempo"]["dia_semana"]
        nombre_ubicacion = i["ubicacion"]["nombre"]
        coordenadas = i["ubicacion"]["coordenadas"]
        
        for horarios in i["horarios"]:
            periodo = horarios["periodo"]
            mediciones = horarios["mediciones"]      
            data.append({
                "fecha": fecha,
                "dia_semana": dia_semana,
                "ubicacion": nombre_ubicacion,
                "coordenadas": coordenadas,
                "periodo": periodo,
                "promedio": mediciones["promedio"],
                "maximo": mediciones["maximo"],
                "minimo": mediciones["minimo"],
                "peak": mediciones["peak"]
            })
    
    df = pd.DataFrame(data)
    df["fecha"] = pd.to_datetime(df["fecha"], format="%Y-%m-%d")
    return df

def show_main_header():
    """Muestra el encabezado principal de la aplicaci√≥n"""
    st.html("<h1 style='font-size: 50px'>üîä ‚ÄúUn D√≠a con Ruido: Descubre c√≥mo suena vivir en la <span style='color: #FF7601'> Residencia Bah√≠a</span>‚Äù</h1>")
    st.markdown("¬øAlguna vez te has preguntado c√≥mo suena el lugar donde vives? Hoy puedes descubrirlo. "
                "Selecciona una fecha del √∫ltimo mes y explora c√≥mo vari√≥ el **nivel de ruido** en la "
                "**Residencia Estudiantil Bah√≠a**, durante la ma√±ana, tarde y noche.")

def plot_daily_noise(df, date):
    """Grafica los niveles de ruido para un d√≠a espec√≠fico"""
    dia = df[df["fecha"].dt.date == date]
    
    if not dia.empty:
        datos = dia[["periodo", "promedio", "maximo", "minimo", "peak"]]
        datos_melt = datos.melt(id_vars="periodo", var_name="Tipo", value_name="Nivel (dB)")

        fig = px.line(
            datos_melt,
            x="periodo",
            y="Nivel (dB)",
            color="Tipo",
            markers=True,
            title=f"Niveles de ruido el {date.strftime('%Y-%m-%d')}",
            labels={"periodo": "Periodo del d√≠a"},
            color_discrete_map={
                "promedio": "blue",
                "maximo": "orange",
                "minimo": "green",
                "peak": "red"
            }
        )
        fig.update_layout(template="plotly_dark", xaxis=dict(tickangle=45))
        st.plotly_chart(fig)

        pico_maximo = datos["peak"].max()
        if pico_maximo >= 80:
            st.html("<h1 style='font-size: 20px ; color: #E6521F'>üò° **¬°D√≠a ruidoso!** El pico de ruido fue muy alto. Tal vez fue una fiesta o mucho tr√°fico.</h1>")
        elif pico_maximo >= 65:
            st.html("<h1 style='font-size: 20px ; color: #FB9E3A'>üòê **Nivel moderado.** El ruido estuvo presente, pero no fue extremo.</h1>")
        else:
            st.html("<h1 style='font-size: 20px ; color: #FCEF91'>üòä **D√≠a tranquilo.** La residencia tuvo niveles de ruido bastante bajos. ¬°Aprovecha para descansar!</h1>")

        image = Image.open("./imagen/imagen4.jpg")
        st.image(image, use_container_width=True)

        st.markdown("---")
        st.markdown("üß© ¬øTe sorprendi√≥ lo que viste? Este es solo **un d√≠a** en la vida sonora de la residencia. "
                    "Imagina todo lo que podr√≠amos descubrir si m√°s personas se suman a escuchar el entorno.")
        st.markdown("üëâ Sigue explorando el ruido. ¬°La ciencia tambi√©n se escucha!")
    else:
        st.warning("‚ö†Ô∏è No hay datos para la fecha seleccionada. Solo est√°n disponibles: Lunes, Mi√©rcoles, Viernes y S√°bado.")

def create_map(data):
    """Crea un mapa con las ubicaciones de los sensores"""
    maps = []
    for ubimap in data:
        maps.append({
            "nombre": ubimap["ubicacion"],
            "lat": ubimap["coordenadas"]["lat"],
            "lon": ubimap["coordenadas"]["lon"]        
        })

    dfmaps = pd.DataFrame(maps)
    mapa = folium.Map(location=(23.0540698, -82.345189), zoom_start=11)

    for i in range(len(dfmaps)):
        folium.Marker(
            location=[dfmaps.loc[i, "lat"], dfmaps.loc[i, "lon"]],
            popup=dfmaps.loc[i, "nombre"]
        ).add_to(mapa)

    folium_static(mapa, width=700)

def plot_max_noise_evolution(df_ubinombre):
    """Grafica la evoluci√≥n de los decibelios m√°ximos por per√≠odo"""
    if not df_ubinombre.empty:  
        df_grafico = df_ubinombre.pivot_table(index="fecha", columns="periodo", values="maximo").reset_index()
        
        st.html("<h2 style='color: #F1EFEC; font-family: Times ; text-align: center'>Evoluci√≥n de los Decibelelios M√°ximo por el Periodo del D√≠a<h2>")
       
        st.area_chart(
            df_grafico.set_index("fecha"),
            use_container_width=True,
            color=["#FF9F43", "#FF6B6B", "#48DBFB"],
            height=400
        )
        
        st.markdown("""Durante el periodo observado, se evidencian variaciones notables en los niveles m√°ximos de ruido seg√∫n el momento del d√≠a.
                    
üîµ La tarde domina con los picos m√°s constantes y elevados, lo que sugiere una actividad intensa en ese horario.

üî¥ La noche presenta algunos picos aislados, probablemente asociados a eventos puntuales o comportamientos an√≥malos.

üü† La ma√±ana muestra fluctuaciones irregulares, aunque generalmente por debajo de los niveles de la tarde.

Este comportamiento indica que el ruido ambiental var√≠a significativamente seg√∫n el per√≠odo del d√≠a,
con la tarde como el tramo m√°s ruidoso de forma sostenida.

üéØ Objetivo: Visualizar c√≥mo var√≠an los niveles m√°ximos de decibelios por per√≠odo del d√≠a y
detectar cu√°l de ellos tiende a registrar los valores m√°s altos de forma sistem√°tica.""")

def plot_peak_noise(df_ubinombre):
    """Grafica los picos m√°ximos de ruido registrados"""
    st.html("<h2 style='color: #F1EFEC; font-family: Times ; text-align: center'>üìäPicos M√°ximos Registrados (peak)<h2>")
    st.line_chart(
        df_ubinombre.pivot_table(index="fecha", columns="periodo", values="peak").reset_index().set_index("fecha"), 
        use_container_width=True,
        color=["#EA047E", "#FF6D28", "#FCE700"],
        height=400
    )
    
    st.markdown("""Los valores m√°s altos de decibelios (picos) var√≠an diariamente, con algunas fechas destacando por registrar niveles extremos.

üí• La tarde nuevamente sobresale con varios picos por encima de los 100 dB, lo cual sugiere eventos an√≥malos o momentos de alta actividad.

üåô La noche y la ma√±ana presentan tambi√©n algunos valores elevados, lo que refuerza la idea de que los picos no siempre ocurren en horarios previsibles.

üìå Este an√°lisis ayuda a detectar eventos at√≠picos o peligrosos para la salud auditiva, incluso si solo duran unos segundos.

üéØ Objetivo: Que el usuario pueda observar con m√°s detalle el comportamiento de los picos sonoros por d√≠a, 
reconociendo cu√°ndo ocurren situaciones inusuales y entendiendo mejor la din√°mica real del ruido en su entorno.""")
    
    st.html("<h4>Sonido de la sirena</h4>")  
    audio = open("./musica/camion-de-bomberos.mp3", "rb")
    st.audio(audio.read(), format="audio/mp3")
    
    st.html("<h4>Sonido del portazo</h4>")

def plot_min_noise_evolution(df_ubinombre):
    """Grafica la evoluci√≥n de los decibelios m√≠nimos por per√≠odo"""
    st.html("<h2 style='color: #F1EFEC; font-family: Times ; text-align: center'>Evoluci√≥n de los Decibeleios m√≠nimo por el Periodo del D√≠a (minimo)<h2>")
    st.line_chart(
        df_ubinombre.pivot_table(
            index="fecha", 
            columns="periodo",
            values="minimo").reset_index().set_index("fecha"),
        use_container_width=True,
        color=["#323EDD","#DC2ADE","#E8F044"],
        height=400
    )

    st.markdown("""Los niveles m√≠nimos de decibeles se mantienen elevados a lo largo del periodo analizado,
                sin registrar ca√≠das notables que indiquen momentos de verdadero silencio.
                
üîµ En la ma√±ana se observan m√°s fluctuaciones, destacando una leve baja el 23 de mayo (42 dB), posiblemente reflejando un instante de menor actividad.

üü£ La noche, sorprendentemente, no es la m√°s silenciosa, manteni√©ndose cerca de los 50 dB de forma constante.

üü° La tarde var√≠a m√°s, pero tampoco desciende a niveles bajos.

En resumen, el gr√°fico evidencia que el ruido es constante y persistente durante todos los per√≠odos del d√≠a.

üéØ Objetivo: Permitir al usuario identificar si existen momentos de verdadero silencio durante el d√≠a y
comprender la persistencia del ruido ambiente, incluso en horarios tradicionalmente m√°s tranquilos.""")

def show_summary_metrics(df):
    """Muestra las m√©tricas resumen"""
    st.subheader("Resumen")
    col1, col2 = st.columns(2)

    with col1:
        st.metric("Mayor nivel registrado (Peak)",
        f"{df['peak'].max()} dB", 
        help="M√°ximo pico de decibelios registrado en cualquier per√≠odo")

    with col2:
        st.metric("Per√≠odo m√°s ruidoso en promedio",
        f"{df.groupby('periodo')['maximo'].mean().idxmax()} ({(df.groupby('periodo')['maximo'].mean().max()):.1f} dB)")
    
        st.metric("Menor nivel registrado",
        f"{df.groupby('periodo')['minimo'].mean().idxmin()} ({(df.groupby('periodo')['minimo'].mean().min()):.1f} dB)")

def plot_noise_limits(df):
    """Grafica los d√≠as que se superaron los l√≠mites de ruido"""
    condiciones = []
    
    for i in range(len(df)):
        periodo = df.iloc[i]["periodo"]
        promedio = df.iloc[i]["promedio"]
        
        if periodo == "ma√±ana" and promedio > 55:
            condiciones.append(True)
        elif periodo == "tarde" and promedio > 65:
            condiciones.append(True)
        elif periodo == "noche" and promedio > 45:
            condiciones.append(True)
        else:
            condiciones.append(False) 
    df["supera_limites"] = condiciones
    
    limites_por_periodo = df[df["supera_limites"]].groupby("periodo")["fecha"].nunique().reset_index(name="dias_superados")

    st.html("<h2 style='color: #F1EFEC; font-family: Times ; text-align: center'>üå°Ô∏è D√≠as en que se superaron los l√≠mites de ruido por per√≠odo<h2>")
    fig = px.bar(
        limites_por_periodo,
        x="periodo",
        y="dias_superados",
        color="periodo",
        color_discrete_map={
            "ma√±ana": "#FFD166",  
            "tarde": "#DC2525",   
            "noche": "#0B1D51" 
            },
        labels={"dias_superados": "Cantidad de d√≠as"}
    )
    st.plotly_chart(fig)

    st.markdown("""
    üìå Este gr√°fico muestra ***cu√°ntas veces se superaron los niveles de ruido saludables***,
    seg√∫n la OMS, para cada per√≠odo del d√≠a: 
    (Teniendo una gran incidencia en la "ma√±ana" y en la "noche")

    - **üåÖ Ma√±ana**: l√≠mite 55 dB
    - **üåû Tarde**: l√≠mite 65 dB
    - **üåô Noche**: l√≠mite 45 dB

    üéØ El objetivo es identificar en qu√© momentos del d√≠a el ambiente fue m√°s ruidoso y si existe alg√∫n patr√≥n recurrente de exposici√≥n a niveles sonoros potencialmente peligrosos.
    """)

def plot_trend_noise(df_ubinombre):
    """Grafica la tendencia del nivel promedio de ruido"""
    df_trend = df_ubinombre.groupby(["fecha", "periodo"])["promedio"].mean().reset_index()
    df_trend["fecha"] = pd.to_datetime(df_trend["fecha"], format="%y-%m-%d")
    df_trend = df_trend.sort_values("fecha")

    st.html("<h2 style='color: #F1EFEC; font-family: Times ; text-align: center'>üìà Tendencia del nivel promedio de ruido por per√≠odo<h2>")
    fig = px.line(
        df_trend,
        x="fecha",
        y="promedio",
        color="periodo",
        markers=True,
        line_shape="spline"
    )

    fig.update_layout(
        xaxis_title="Fecha",
        yaxis_title="Nivel de ruido (dB)",
        legend_title="Per√≠odo del d√≠a",
        template="plotly_white"
    )
    
    st.plotly_chart(fig)

    st.markdown("""
                Estuve midiendo el ruido en la Residencia durante m√°s de un mes, en tres momentos: ma√±ana, tarde y noche.
Y este gr√°fico me lo confirm√≥: no hay silencio real‚Ä¶ en ning√∫n momento.

üîµ En la ma√±ana, el ruido sube y baja como una monta√±a rusa. Algunos d√≠as arranca tranquilo, otros parece que el d√≠a empieza con bocinas.

üü° La tarde es la campeona del esc√°ndalo. Hay picos por encima de los 70 dB ‚Äîeso equivale a tener tr√°fico intenso todo el tiempo. S√≠, as√≠ como lo oyes (o lo sufres).

üü£ La noche decepciona. Pens√© que ser√≠a el momento de m√°s calma, pero se mantiene firme sobre los 55 dB. El descanso, al parecer, tambi√©n tiene banda sonora.

üìâ Lo que m√°s me impact√≥ es que no hay un solo d√≠a donde el ruido baje realmente. Siempre hay algo sonando, pitando, zumbando‚Ä¶ aunque no lo registremos.

üéØ ¬øQu√© buscaba con esto? Saber si hab√≠a momentos de verdadero silencio.
Y la respuesta fue clara: no los hay.
                """)

def plot_comparison_residencia_alamar(df):
    """Compara los niveles de ruido entre la residencia y Alamar"""
    df["fecha"] = pd.to_datetime(df["fecha"])

    fecha_inicio = pd.to_datetime("2025-05-02")
    fecha_final = pd.to_datetime("2025-05-17")

    todo = ["Alamar", "Residencia Estudiantil Bahia"]
    todos = []

    for ubic in todo:
        todos.append(
            df[
                (df["ubicacion"] == ubic) &
                (df["fecha"] >= fecha_inicio) &
                (df["fecha"] <= fecha_final)
            ]
            .groupby(["periodo"])["promedio"]
            .mean()
            .reset_index()
            .assign(ubicacion=ubic)
        )

    if todos:
        df_final = pd.concat(todos, ignore_index=True)
        
        st.html("<h2 style='color: #F1EFEC; font-family: Times ; text-align: center'>Comparaci√≥n entre la Residencia y Alamar</h2>")

        fig = px.bar(
            df_final,
            x="periodo",
            y="promedio",
            color="periodo",
            color_discrete_map={
                "ma√±ana": "#16610E",  
                "tarde": "#F97A00",   
                "noche": "#FED16A" 
            },
            facet_col="ubicacion"
        )
        fig.update_xaxes(title_text="Per√≠odos")

        fig.for_each_annotation(lambda a: a.update(text=a.text.split("=")[-1]))

        fig.update_layout(
            xaxis_title="Per√≠odos",
            yaxis_title="Nivel de ruido (dB)",
            legend_title="Per√≠odo del d√≠a",
            template="plotly_white"
        )

        st.plotly_chart(fig)

    st.markdown("""
                üîé ¬øQu√© estamos viendo aqu√≠?

Este gr√°fico compara los niveles de ruido registrados en dos lugares clave durante el mismo per√≠odo de tiempo:
üìç Alamar y üìç la Residencia Estudiantil Bah√≠a.

La medici√≥n en Alamar se hizo cerca de la beca que est√° all√°, o sea, bastante cerca del entorno donde viven estudiantes tambi√©n.

La idea fue tomar 10 d√≠as (del 2 al 17 de mayo de 2025) y mirar c√≥mo se comporta el ruido en esos lugares durante tres momentos del d√≠a:
üåÖ ma√±ana, ‚òÄÔ∏è tarde y üåô noche.

üéØ Mi objetivo fue ver c√≥mo se comporta el ruido en estos dos lugares durante el d√≠a.
Quer√≠a responder preguntas como:

‚Äî ¬øD√≥nde hay m√°s ruido?

‚Äî ¬øHay momentos m√°s cr√≠ticos en alguna de las dos ubicaciones?

üí• En resumen, busco entender c√≥mo el entorno sonoro afecta la vida cotidiana, especialmente en lugares donde vivimos estudiantes.
                    """)

def plot_weekly_trend(residencia):
    """Grafica la tendencia semanal del ruido"""
    residencia["dia_semana"] = residencia["fecha"].dt.day_name()
    residencia["semana"] = residencia["fecha"].dt.isocalendar().week
    residencia["dia_semana"] = pd.Categorical(residencia["dia_semana"], ordered=True)

    resumen = residencia.groupby(["semana", "dia_semana"])["promedio"].mean().reset_index()

    fig = px.bar(
        resumen,
        x="dia_semana",
        y="promedio",
        color="semana",
        barmode="group",
        title="üîä Tendencia semanal del ruido seg√∫n el d√≠a de la semana\nResidencia Estudiantil (todas las semanas)",
        labels={"dia_semana": "D√≠as", "promedio": "Promedio de ruido (dB)", "semana": "Semana"},
        color_discrete_sequence=px.colors.qualitative.Vivid
    )

    fig.update_layout(
        template="plotly_dark",
        xaxis_tickangle=-30,
        title_font_size=18,
        font=dict(size=14),
        plot_bgcolor="rgba(0,0,0,0)",
        paper_bgcolor="rgba(0,0,0,0)"
    )

    st.plotly_chart(fig, use_container_width=True)