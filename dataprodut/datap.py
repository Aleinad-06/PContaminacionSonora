import pandas as pd 
import streamlit as st
import json
import plotly.express as px
from PIL import Image
import folium
from streamlit_folium import folium_static

rjson = "../data/data.json"

inf = []

with open(rjson, "r", encoding="utf-8") as file:
    inf = json.load(file)

data = []

for i in inf:

    fecha = i["tiempo"]["fecha"]
    dia_semana = i["tiempo"]["dia_semana"]
    nombre_ubicacion = i["ubicacion"]["nombre"]
    coordenadas = i["ubicacion"]["coordenadas"]
    
    for horarios in i["horarios"]:
        periodo = horarios["periodo"]
        mediciones = horarios["mediciones"]      
        data.append(
            {
                "fecha": fecha,
                "dia_semana": dia_semana,
                "ubicacion": nombre_ubicacion,
                "coordenadas": coordenadas,
                "periodo": periodo,
                "promedio": mediciones["promedio"],
                "maximo": mediciones["maximo"],
                "minimo": mediciones["minimo"],
                "peak": mediciones["peak"]
            }
        )

df = pd.DataFrame(data)

df["fecha"] = pd.to_datetime(df["fecha"], format="%Y-%m-%d")

st.title("üîä ‚ÄúUn D√≠a con Ruido: Descubre c√≥mo suena vivir en la Residencia Bah√≠a‚Äù")

st.markdown("¬øAlguna vez te has preguntado c√≥mo suena el lugar donde vives? Hoy puedes descubrirlo. "
            "Selecciona una fecha del √∫ltimo mes y explora c√≥mo vari√≥ el **nivel de ruido** en la "
            "**Residencia Estudiantil Bah√≠a**, durante la ma√±ana, tarde y noche.")

date = st.date_input("Selecciona el d√≠a para explorar c√≥mo se comport√≥ el ruido", value=pd.to_datetime("2025-05-23"))
dia = df[df["fecha"].dt.date == date]


if not dia.empty:
    datos = dia[["periodo", "promedio", "maximo", "minimo", "peak"]]

    datos_melt = datos.melt(id_vars="periodo", var_name="Tipo", value_name="Nivel (dB)")

    fig = px.line(
        datos_melt,
         x="periodo",
        y="Nivel (dB)",
        color="Tipo",
        markers=True,
        title=f"Niveles de ruido el {date.strftime('%Y-%m-%d')}",
        labels={"periodo": "Periodo del d√≠a"},
        color_discrete_map={
            "promedio": "blue",
            "maximo": "orange",
            "minimo": "green",
            "peak": "red"
        }
    )
    fig.update_layout(template="plotly_dark", xaxis=dict(tickangle=45))
    st.plotly_chart(fig)

    pico_maximo = datos["peak"].max()
    if pico_maximo >= 80:
        st.markdown("üò° **¬°D√≠a ruidoso!** El pico de ruido fue muy alto. Tal vez fue una fiesta o mucho tr√°fico.")
    elif pico_maximo >= 65:
        st.markdown("üòê **Nivel moderado.** El ruido estuvo presente, pero no fue extremo.")
    else:
        st.markdown("üòä **D√≠a tranquilo.** La residencia tuvo niveles de ruido bastante bajos. ¬°Aprovecha para descansar!")

    image = Image.open("../imagen/imagen4.jpg")
    st.image(image, use_container_width=True)

    st.markdown("---")
    st.markdown("üß© ¬øTe sorprendi√≥ lo que viste? Este es solo **un d√≠a** en la vida sonora de la residencia. "
                "Imagina todo lo que podr√≠amos descubrir si m√°s personas se suman a escuchar el entorno.")
    st.markdown("üëâ Sigue explorando el ruido. ¬°La ciencia tambi√©n se escucha!")

else:
    st.warning("‚ö†Ô∏è No hay datos para la fecha seleccionada. Solo est√°n disponibles: Lunes, Mi√©rcoles, Viernes y S√°bado.")



#-----------------------


st.title("Y Porque no ver algo m√°s interesante")
mostrar_analisis = st.button("Veamos los An√°lisis")

if mostrar_analisis:
    
#--------------------

    maps = []
    for ubimap in data:
        maps.append(
            {
                "nombre": ubimap["ubicacion"],
                "lat": ubimap["coordenadas"]["lat"],
                "lon": ubimap["coordenadas"]["lon"]        
            }
        )

    dfmaps = pd.DataFrame(maps)

    mapa = folium.Map(location=(23.0540698, -82.345189), zoom_start=11)

    for i in range(len(dfmaps)):
        folium.Marker(
            location=[dfmaps.loc[i, "lat"], dfmaps.loc[i, "lon"]],
            popup=dfmaps.loc[i, "nombre"]
        ).add_to(mapa)

    folium_static(mapa, width=700)


#---------------------

    df_grafico = df.pivot_table(index= "fecha", columns= "periodo", values= "maximo").reset_index()
    st.subheader("Evoluci√≥n de los Decibelelios M√°ximo por el Periodo del D√≠a")
    st.area_chart(
        df_grafico.set_index("fecha"),
        use_container_width= True,
        color=["#FF9F43", "#FF6B6B", "#48DBFB"],
        height= 400
    )

    st.subheader("üìäPicos M√°ximos Registrados (peak)")
    st.line_chart(
        df.pivot_table(index= "fecha", columns= "periodo", values= "peak").reset_index().set_index("fecha"), 
        use_container_width= True,
        color=["#EA047E", "#FF6D28", "#FCE700"],
        height=400
    )
    
    st.markdown("""A lo largo del periodo analizado en la Residencia Estudiantil Bah√≠a,
                se registraron los valores peak de ruido correspondientes a diferentes momentos del d√≠a. 
                Estos picos reflejan los instantes de mayor intensidad sonora en cada jornada,
                lo cual permite identificar variaciones y posibles anomal√≠as en el ambiente ac√∫stico.

üîä En uno de los d√≠as, el peak super√≥ los 100 dB, debido al paso de un cami√≥n de bomberos con la sirena encendida.
Este evento puntual gener√≥ una anomal√≠a sonora significativa dentro del registro general.

üéØ El prop√≥sito de este an√°lisis es que el usuario pueda observar con m√°s detalle el comportamiento de los picos sonoros por d√≠a,
reconociendo cu√°ndo ocurren situaciones inusuales y entendiendo mejor la din√°mica real del ruido en su entorno.""")
    
    st.html(
        "<h4>Sonido de la sirena</h4>"
    )  
    audio = open("../musica/camion-de-bomberos.mp3", "rb")
    st.audio(audio.read(), format="audio/mp3")
       
    st.subheader("Evoluci√≥n de los Decibeleios m√≠nimo por el Periodo del D√≠a (minimo)")
    st.line_chart(
        df.pivot_table(index= "fecha", columns= "periodo", values= "minimo").reset_index().set_index("fecha"),
        use_container_width= True,
        color= ["#323EDD","#DC2ADE","#E8F044"],
        height= 400
    )

    st.subheader("An√°lisis")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.metric("Mayor nivel registrado (Peak)", f"{df['peak'].max()} dB", 
        help="M√°ximo pico de decibelios registrado en cualquier per√≠odo")

    with col2:
        st.metric("Per√≠odo m√°s ruidoso en promedio",
        f"{df.groupby('periodo')['maximo'].mean().idxmax()} ({(df.groupby('periodo')['maximo'].mean().max()):.1f} dB)")

    st.markdown("""
    **Leyenda:**
    -  **Ma√±ana:** 6:30 - 12:30
    -  **Tarde:** 12:30 - 18:30
    -  **Noche:** 18:30 - 6:30

    **Niveles de referencia seg√∫n OMS :**
    - <55 dB üîä: Nivel recomendado para √°reas residenciales durante el d√≠a 
    - 55-65 dB ‚ö†Ô∏è: Puede causar molestias y alteraciones del sue√±o
    - >65 dB üî¥: Riesgo de enfermedades cardiovasculares con exposici√≥n prolongada
    - >75 dB üö®: Da√±o auditivo potencial seg√∫n exposici√≥n

    **Referencia nocturna especial:**
    - <45 dB üåô: Nivel recomendado para horario nocturno
    *(Para prevenir alteraciones del sue√±o - OMS)*
    """)
    
